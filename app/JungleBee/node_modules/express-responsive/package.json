{
  "name": "express-responsive",
  "version": "0.1.0",
  "author": {
    "name": "Jan Nikolas Jansen",
    "email": "jannikolas.jansen@gmail.com"
  },
  "main": "./lib/responsive.js",
  "repository": {
    "type": "git",
    "url": "https://github.com/nijansen/express-responsive.git"
  },
  "dependencies": {
    "express": "3"
  },
  "devDependencies": {
    "coffee-script": "1.6",
    "mocha": "1.9",
    "chai": "1.5",
    "supertest": "0.5",
    "docco": "0.6",
    "markdown": "0.4",
    "jade": "0.28",
    "ejs": "0.8"
  },
  "engines": {
    "node": ">=0.10"
  },
  "readme": "# express-responsive\r\n\r\n## Introduction\r\n\r\nDesktop devices are by far not the only devices a modern web developer has to expect today. We see it for granted to be able to view a website from our phones, tablets, or TV.\r\n\r\n**express-responsive** extends the [Express](http://expressjs.com) web framework of methods to respond to different devices appropriately.\r\n\r\n## Installation\r\n\r\n\tnpm install express-responsive\r\n\r\n## Usage\r\n\r\nThere are two ways of using **express-responsive**. You can attach middleware to your application and properly handle different devices explicitly to fit your needs, or you can use a more generic approach, and let Express search for proper templates itself.\r\n\r\n### Middleware approach\r\n\r\nThis example uses [Jade](http://jade-lang.com) as template engine. You can use whatever engine you like, as long as it follows the [Express conventions](http://expressjs.com/api.html#app.engine).\r\n\r\n\tvar express = require('express'),\r\n\t\tresponsive = require('responsive'),\r\n\t\tapp = express();\r\n\r\n\tapp.configure(function() {\r\n\t\tapp.set('views', __dirname + '/views');\r\n\t\tapp.set('view engine', 'jade');\r\n\r\n\t\t// This is the important line!\r\n\t\tapp.use(responsive.deviceCapture());\r\n\t});\r\n\r\n\tapp.get('/', function(req, res) {\r\n\t\tif(req.device === 'phone') {\r\n\t\t\tres.render('phone');\r\n\t\t}\r\n\t\telse {\r\n\t\t\tres.render('index');\r\n\t\t}\r\n\t});\r\n\r\n### Device dependent routing approach\r\n\r\nAnalogue to the middleware approach, we use the Jade engine as an example here.\r\n\r\n\tvar express = require('express'),\r\n\t\tresponsive = require('responsive'),\r\n\t\tapp = express();\r\n\r\n\tapp.configure(function() {\r\n\t\tapp.set('views', __dirname + '/views');\r\n\t\tapp.set('view engine', 'jade');\r\n\r\n\t\t// This is the important line!\r\n\t\tapp.enableDeviceRouting();\r\n\t});\r\n\r\n\tapp.get('/', function(req, res) {\r\n\t\tres.render('index');\r\n\t});\r\n\r\nWhen you call `res.render`, **express-responsive** will detect the device used, check if there is a template available for that device, and fallback otherwise.\r\n\r\nFor example, if you requested the website from your smartphone, `res.render` will first look if `views/phone/index.jade` exists. If it does it will render that view. If the file does not exist, it will fallback to `views/index.jade`.\r\n\r\n**Attention:** Please note that `req.device` is not available when using this approach. **If you want both** device routing and `req.device`:\r\n\r\n\tapp.configure(function() {\r\n\t\t/* Your template engine here */\r\n\r\n\t\tapp.use(responsive.deviceCapture());\r\n\t\tapp.enableDeviceRouting();\r\n\t});\r\n\r\n## Detected devices\r\n\r\n**express-responsive** will divide devices into the categories\r\n\r\n- `desktop`\r\n- `tablet`\r\n- `phone`\r\n- `tv`\r\n- `bot`\r\n\r\nIt will assume `desktop` if no user agent string is given, and fallback to `phone` if the user agent string is unknown.\r\n\r\n## Tests and documentation\r\n\r\n**express-responsive** is written in CoffeeScript. When you have installed CoffeeScript globally and the development dependencies of **express-responsive** locally, you can just run from the main directory:\r\n\r\n- `cake test` will run the test suites\r\n- `cake docs` will generate documentation from source and store it in HTML format in the `docs` directory\r\n- `cake dist` will build from source into the `dist` directory. **Usually you do not need to execute this command - the `lib` directory holds compiled sources already!**\r\n\r\nShould you notice any device that is not properly detected, please be so kind to create an issue providing the user agent string of the device.\r\n\r\n## Purpose\r\n\r\nThis project is heavily based on [express-device](https://github.com/rguerreiro/express-device). Unfortunately, express-device is dependent on [express-partials](https://github.com/publicclass/express-partials). This creates problems on many template engines (the most I tested so far besides EJS) due to known limitations within express-partials (see publicclass/express-partials#30).\r\n\r\n## License\r\n\r\n**express-responsive** is licensed under the MIT license. For more information, please refer to the `LICENSE.md` file located in the main directory of the project.",
  "readmeFilename": "README.md",
  "_id": "express-responsive@0.1.0",
  "description": "Desktop devices are by far not the only devices a modern web developer has to expect today. We see it for granted to be able to view a website from our phones, tablets, or TV.",
  "dist": {
    "shasum": "a31244ee27dd701e22d9bf32f6da23c4735f70ad",
    "tarball": "http://registry.npmjs.org/express-responsive/-/express-responsive-0.1.0.tgz"
  },
  "_from": "express-responsive@~0.1.0",
  "_npmVersion": "1.2.15",
  "_npmUser": {
    "name": "nijansen",
    "email": "jannikolas.jansen@gmail.com"
  },
  "maintainers": [
    {
      "name": "nijansen",
      "email": "jannikolas.jansen@gmail.com"
    }
  ],
  "directories": {},
  "_shasum": "a31244ee27dd701e22d9bf32f6da23c4735f70ad",
  "_resolved": "https://registry.npmjs.org/express-responsive/-/express-responsive-0.1.0.tgz",
  "bugs": {
    "url": "https://github.com/nijansen/express-responsive/issues"
  },
  "homepage": "https://github.com/nijansen/express-responsive"
}
